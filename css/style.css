/* ── 1. UNIVERSE / STARFIELD BACKGROUND ───────────────────────────────── */
/* Make #universe fill the viewport minus navbar height */
#universe {
  position: absolute;
  top: 60px;           /* match your navbar height */
  left: 0;
  width: 100%;
  bottom: 0;
  overflow: hidden;
  background: #000 url('https://i.imgur.com/9kG7Q3h.png') center/cover no-repeat;
  /* That URL is a placeholder starfield; replace with your own darker/HD SVG if desired */
}

/* Parallax layers (optional): you can add multiple backgrounds to #universe, e.g.: */
/*
background:
  url('images/nebula.png') center/cover no-repeat,
  url('images/stars.png') center/cover no-repeat,
  #000;
background-attachment: fixed, scroll, scroll;
*/




/* ── 2. PLANET POSITIONING ───────────────────────────────────────────────── */
/*
  .planet elements are positioned in #universe based on data-x/data-y.
  We’ll override their inline CSS via JS after loading to place them.
*/
.planet {
  position: absolute;
  width: 100px;   /* planet size (100px × 100px) */
  height: 100px;
  transform: translate(-50%, -50%); /* center at the coordinate */
  z-index: 10;
}

/* Inside each .planet, your .project-card styling remains as before */
.ee-dex-grid {
  position: relative; /* not used for layout—.planet absolute overrides */
  width: 100%;
  height: 100%;
}



/* ── 3. ROCKET (cursor follower) ─────────────────────────────────────────── */
#rocket {
  position: absolute;
  top: 50%;
  left: 50%;
  width: 60px;            /* adjust rocket size */
  pointer-events: none;   /* let clicks pass through */
  transform: translate(-50%, -50%) rotate(0deg);
  transition: transform 0.1s ease-out;
  z-index: 50;
}


/* ── 4. DEBRIS (floating, rotating bits) ────────────────────────────────── */
.debris {
  position: absolute;
  width: 40px;                /* debris size */
  height: 40px;
  background: url('images/debris.png') center/cover no-repeat;
  pointer-events: none;       /* don’t block clicks */
  opacity: 0.8;
  z-index: 5;
  /* We will set top/left with JS, but animate rotation & drift in CSS: */
  animation: drift linear infinite, spin linear infinite;
}
/* Keyframes for drifting downward slowly */
@keyframes drift {
  from { transform: translateY(0px); }
  to   { transform: translateY(200px); }
}
/* Keyframes for constant rotation */
@keyframes spin {
  from { transform: rotate(0deg); }
  to   { transform: rotate(360deg); }
}

/* We’ll override each .debris’s animation-duration and rotation direction via inline CSS or JS: */
/*
  e.g. style="animation-duration: 8s, 5s; animation-direction: normal, reverse;"
  for drift speed & spin speed
*/


/* ── 5. POKÉDEX PANEL (unchanged, but ensure it sits above everything) ──── */
.pokedex-panel {
  position: absolute;
  top: 60px;
  right: 0;
  width: 35%;
  height: calc(100% - 60px);
  background: #262626;
  box-shadow: -4px 0 8px rgba(0,0,0,0.4);
  transform: translateX(100%);  /* hidden off-screen initially */
  transition: transform 0.3s ease;
  z-index: 100;
}
.pokedex-panel.visible {
  transform: translateX(0);
}

/* ── 6. RESPONSIVE (mobile) ─────────────────────────────────────────────── */
@media (max-width: 768px) {
  #universe {
    top: 60px; bottom: 0;
  }
  .pokedex-panel {
    width: 100%;
    height: 50vh;
    bottom: 0;
    right: 0;
    transform: translateY(100%);
  }
  .pokedex-panel.visible {
    transform: translateY(0);
  }
}
